@page "/"
@inject IJSRuntime JS
@using DomainTester.Services

<PageTitle>Index</PageTitle>
<svg xmlns="http://www.w3.org/2000/svg" style="display: none;">
    <symbol id="info-fill" fill="currentColor" viewBox="0 0 16 16">
        <path d="M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16zm.93-9.412-1 4.705c-.07.34.029.533.304.533.194 0 .487-.07.686-.246l-.088.416c-.287.346-.92.598-1.465.598-.703 0-1.002-.422-.808-1.319l.738-3.468c.064-.293.006-.399-.287-.47l-.451-.081.082-.381 2.29-.287zM8 5.5a1 1 0 1 1 0-2 1 1 0 0 1 0 2z" />
    </symbol>
</svg>

<h1>Domain Tester</h1>

<form class="form" @onsubmit="FormSubmit" @onsubmit:preventDefault>
    <div class="form-group">
        <div class="alert alert-secondary"><svg class="bi flex-shrink-0 me-2" width="24" height="24" role="img" aria-label="Info:"><use xlink:href="#info-fill" /></svg> Entering a more specific url (for example, http://example.com/contactme), will give you a better test suite.</div>
        <label for="url" class="col-3">Enter a url for your site</label>
        <input type="url" id="url" class="col-9" autofocus required @ref="UrlElement" @bind-value="@Model.Uri" />
    </div>
    <div style="padding:5px 0px">
        <button type="submit" class="btn btn-primary">Submit</button>
    </div>
</form>


@{
    if (Results is not null)
    {
    <hr />
    <h2>Results</h2>
    <h3>Url's to test for @Results.Url</h3>
    <table class="table">
            <thead>
            <tr>
            <th>Url to test</th>
            <th>Expected result</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var test in Results.UrlTestSuite)
            {
                <tr>
                <td><a href="@test.Uri.ToString()" target="_blank">@test.Uri.ToString()</a></td>
                <td>@test.ExpectedResult</td>
                </tr>
            }
            </tbody>
    </table>
    }
}

@code {
    private ElementReference UrlElement;

    private FormData Model = new();

    private FormResults? Results = null;

    private async Task FormSubmit()
    {
        var url = new UrlTestGenerator();
        var uri = new Uri(Model.Uri);
        var urlTestSuite = url.Execute(uri);

        Results = new FormResults(uri, urlTestSuite);
        Model.Uri = string.Empty;
        await JS.SetFocusAsync(UrlElement);
    }

    internal struct FormData
    {
        public FormData(string uri)
        {
            Uri = uri;
        }

        public string Uri { get; set; }
    }

    internal record FormResults(Uri Url, IEnumerable<UrlTestGenerator.UrlTestSuite> UrlTestSuite);
}